[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"


[project]
name = "contextforge"
version = "0.1.0"
description = "Context-aware markdown diff/file extractor and fuzzy patch applier."
readme = "README.md"
requires-python = ">=3.8"
authors = [{ name = "ContextForge Contributors" }]
keywords = ["patch", "diff", "unified diff", "fuzzy patch", "markdown"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Version Control"
]

# Pull in the standard patch parser used by the fallback in core.py
dependencies = [
  "patch>=1.16",
  "pathspec>=0.12",
  "pytest>=8.3.5",
]

[project.urls]
Homepage = "https://github.com/robertinglin/contextforge"
Repository = "https://github.com/robertinglin/contextforge"

[tool.setuptools.packages.find]
include = ["contextforge*"]

[tool.setuptools]
include-package-data = false

# -----------------------------------
# Tooling configuration (lint/type/tests/coverage)
# -----------------------------------
[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
# Forbid print() in library code
extend-select = ["T201"]
select = ["E", "F", "I", "UP", "B", "SIM", "W"]
ignore = ["E501"]


[tool.mypy]
python_version = "3.8"
warn_unused_ignores = true
warn_redundant_casts = true
disallow_untyped_defs = false
ignore_missing_imports = true
show_error_codes = true

[tool.pytest.ini_options]
addopts = "-q"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["contextforge"]
parallel = true

[tool.coverage.report]
show_missing = true
fail_under = 80

# Optional docs extra so users can `pip install .[docs]` to build the site
[project.optional-dependencies]
docs = [
  "mkdocs>=1.5",
  "mkdocs-material>=9.5"
]
